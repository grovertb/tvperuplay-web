{"version":3,"sources":["resources/banner-bg.png","resources/icon.png","resources/iphone_hand.png","utils/constants.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","nameApp","useStyles","makeStyles","overflow","appBar","backgroundColor","container","marginLeft","marginRight","paddingLeft","paddingRight","width","containerApp","flex","minHeight","paddingTop","contentApp","background","require","backgroundSize","flexContent","display","flexDirection","textAlign","flexHeight","justifyContent","googlePlay","height","header","icon","maxHeight","phone","titleApp","fontSize","fontWeight","marginBotton","titleContent","color","toolbar","alignItems","paddingBottom","name","App","classes","Fragment","AppBar","position","className","elevation","Container","maxWidth","Toolbar","alt","constants","src","Typography","Grid","item","xs","md","variant","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,oICA5B,GACbC,QAAS,gBCMLC,EAAYC,YAAW,CAC3B,UAAW,CACT,cAAe,CACbC,SAAU,WAGdC,OAAQ,CACNC,gBAAiB,eAEnBC,UAAW,CACTC,WAAY,OACZC,YAAa,OACbC,YAAa,GACbC,aAAc,GACdC,MAAO,QAETC,aAAc,CACZC,KAAM,EACNC,UAAW,QACXC,WAAY,KAEdC,WAAW,CACTC,WAAW,OAAD,OAASC,EAAQ,IAAjB,eACVC,eAAgB,SAElBC,YAAa,CACXC,QAAS,OACTC,cAAe,SACfC,UAAY,UAEdC,WAAY,CACV,UAAW,CACTH,QAAS,OACTI,eAAgB,UAElBZ,KAAM,GAERa,WAAY,CACV,4BAA6B,CAC3BC,OAAQ,IAEVA,OAAQ,KAEVC,OAAQ,CACNjB,MAAO,QAETkB,KAAM,CACJC,UAAW,IAEbC,MAAO,CACLD,UAAW,QAEbE,SAAU,CACRC,SAAU,GACVC,WAAY,OACZC,aAAc,GACd5B,WAAY,GAEd6B,aAAc,CACZ,4BAA6B,CAC3BH,SAAU,UAEZI,MAAO,QACPJ,SAAU,SACVC,WAAY,KAEdI,QAAS,CACP,4BAA6B,CAC3Bb,eAAgB,UAElBc,WAAY,SACZlB,QAAS,OACTmB,cAAe,EACfzB,WAAY,IAEb,CAAE0B,KAAM,cAwCIC,MAtCf,WACE,IAAMC,EAAU1C,IAEhB,OACE,kBAAC,IAAM2C,SAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,QAAQC,UAAWJ,EAAQvC,OAAQ4C,UAAW,GAC7D,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAASJ,UAAWJ,EAAQL,SAC1B,yBAAKc,IAAKC,EAAUrD,QAAS+C,UAAWJ,EAAQd,KAAMyB,IAAKpC,EAAQ,MACnE,kBAACqC,EAAA,EAAD,CAAYR,UAAWJ,EAAQX,UAAWqB,EAAUrD,YAI1D,yBAAK+C,UAAWJ,EAAQ3B,YACtB,kBAACiC,EAAA,EAAD,CAAWF,UAAWJ,EAAQ/B,cAC5B,kBAAC4C,EAAA,EAAD,CAAMlD,WAAS,EAACyC,UAAWJ,EAAQnB,YACjC,kBAACgC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGpB,WAAW,UACnC,yBAAKQ,UAAWJ,EAAQvB,aACtB,kBAACmC,EAAA,EAAD,CAAYK,QAAQ,UAAUb,UAAWJ,EAAQP,cAAjD,8EAIA,uBAAGyB,KAAK,gFAAgFC,OAAO,SAASC,IAAI,uBAC1G,yBAAKX,IAAI,4BAA4BL,UAAWJ,EAAQjB,WAAY4B,IAAI,oGAI9E,kBAACE,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAErB,yBAAKZ,UAAWJ,EAAQZ,MAAOqB,IAAKC,EAAUrD,QAASsD,IAAKpC,EAAQ,YCrG9D8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6c082883.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner-bg.2f3b3ac0.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.81878ee0.png\";","module.exports = __webpack_public_path__ + \"static/media/iphone_hand.b795284a.png\";","export default { \n  nameApp: 'TV PERU PLAY'\n}","import React from 'react';\n\nimport { Container, Typography, AppBar, Toolbar, Grid } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles'\n\nimport constants from './utils/constants';\n\nconst useStyles = makeStyles({\n  \"@global\": {\n    'body, #root': {\n      overflow: 'hidden'\n    }\n  },\n  appBar: {\n    backgroundColor: 'transparent'\n  },\n  container: {\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    paddingLeft: 15,\n    paddingRight: 15,\n    width: '100%'\n  },\n  containerApp: {\n    flex: 1,\n    minHeight: '100vh',\n    paddingTop: 100\n  },\n  contentApp:{\n    background: `url(${require('./resources/banner-bg.png')}) no-repeat`,\n    backgroundSize: 'cover',\n  },\n  flexContent: {\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign : 'center'\n  },\n  flexHeight: {\n    '& > div' :{\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    flex: 1\n  },\n  googlePlay: {\n    '@media (max-width: 768px)': {\n      height: 80\n    },\n    height: 110\n  },\n  header: {\n    width: '100%',\n  },\n  icon: {\n    maxHeight: 64\n  },\n  phone: {\n    maxHeight: '80vh',\n  },\n  titleApp: {\n    fontSize: 25,\n    fontWeight: 'bold',\n    marginBotton: 12,\n    marginLeft: 8\n  },\n  titleContent: {\n    '@media (max-width: 768px)': {\n      fontSize: '1.1rem',\n    },\n    color: 'white',\n    fontSize: '2.2rem',\n    fontWeight: 500\n  },\n  toolbar: {\n    '@media (max-width: 768px)': {\n      justifyContent: 'center'\n    },\n    alignItems: 'center',\n    display: 'flex',\n    paddingBottom: 8,\n    paddingTop: 8\n  }\n}, { name: 'GroverApp'})\n\nfunction App() {\n  const classes = useStyles()\n  \n  return (\n    <React.Fragment>\n      <AppBar position='fixed' className={classes.appBar} elevation={0}>\n        <Container maxWidth='lg'>\n          <Toolbar className={classes.toolbar}>\n            <img alt={constants.nameApp} className={classes.icon} src={require('./resources/icon.png')} />\n            <Typography className={classes.titleApp}>{constants.nameApp}</Typography>\n          </Toolbar>\n        </Container>\n      </AppBar>\n      <div className={classes.contentApp}>\n        <Container className={classes.containerApp}>\n          <Grid container className={classes.flexHeight}>\n            <Grid item xs={12} md={7} alignItems='center'>\n              <div className={classes.flexContent}>\n                <Typography variant='inherit' className={classes.titleContent}>\n                  {/* Disfruta de TV desde tu celular */}\n                  Disfruta la experiencia de ver tv en vivo desde tu smartphone รณ tablet.\n                </Typography>\n                <a href='https://play.google.com/store/apps/details?id=io.github.grovertb.tvperuplayv2' target='_blank' rel=\"noopener noreferrer\">\n                  <img alt='Disponible en Google Play' className={classes.googlePlay} src='https://play.google.com/intl/es-419/badges/static/images/badges/es-419_badge_web_generic.png'/>\n                </a>\n              </div>\n            </Grid>\n            <Grid item xs={12} md={5}>\n                {/* <div>App</div> */}\n              <img className={classes.phone} alt={constants.nameApp} src={require('./resources/iphone_hand.png')} />\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}